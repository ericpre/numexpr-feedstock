{% set version = "2.8.4" %}
{% set build = 0 %}
{% set build_string = '' %}

{% set build_string = 'mkl_' %}              # [(linux64 or win64) and mkl_support == 'mkl']
{% set build = build + 100 %}                # [(linux64 or win64) and mkl_support != 'mkl']

package:
  name: numexpr
  version: {{ version }}

source:
  url: https://pypi.io/packages/source/n/numexpr/numexpr-{{ version }}.tar.gz
  sha256: d5432537418d18691b9115d615d6daa17ee8275baef3edf1afbbf8bc69806147

build:
  string: "{{ build_string }}py{{ py }}h{{ PKG_HASH }}_{{ build }}"
  number: {{ build }}
  script: bash {{ RECIPE_DIR }}/build_without_mkl.sh  # [unix and not (linux64 and mkl_support == 'mkl')]
  script: bash {{ RECIPE_DIR }}/build_with_mkl.sh     # [linux64 and mkl_support == 'mkl']
  track_features:
    - numexpr_mkl                            # [(linux64 or win64) and mkl_support == 'mkl']

requirements:
  build:
    - python                                 # [build_platform != target_platform]
    - cross-python_{{ target_platform }}     # [build_platform != target_platform]
    - numpy                                  # [build_platform != target_platform]
    - {{ compiler('c') }}
    - {{ compiler('cxx') }}
  host:
    - mkl                                    # [(linux64 or win64) and mkl_support == 'mkl']
    - mkl-devel                              # [(linux64 or win64) and mkl_support == 'mkl']
    - numpy
    - pip
    - python
    - setuptools
  run:
    - libblas * *mkl                         # [(linux64 or win64) and mkl_support == 'mkl']
    - mkl                                    # [(linux64 or win64) and mkl_support == 'mkl']
    - nomkl                                  # [(linux64 or win64) and mkl_support != 'mkl']
    - python

test:
  imports:
    - numexpr
    - numexpr.interpreter

about:
  home: https://github.com/pydata/numexpr
  license: MIT
  license_file: LICENSE.txt
  summary: Fast numerical expression evaluator for NumPy.
  description: |
    Numexpr is a fast numerical expression evaluator for NumPy. With it,
    expressions that operate on arrays (like "3*a+4*b") are accelerated and use
    less memory than doing the same calculation in Python.
  doc_url: https://github.com/pydata/numexpr/wiki/Numexpr-Users-Guide
  dev_url: https://github.com/pydata/numexpr

extra:
  recipe-maintainers:
    - msarahan
    - ocefpaf
    - scopatz
    - djkirkham
